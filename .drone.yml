kind: pipeline
name: terraform-google-astronomer-cloud

steps:

- name: lint
  image: hashicorp/terraform:light
  commands:
    - cp providers.tf.example providers.tf
    - terraform init
    - terraform fmt -check=true
    - |
      echo '{
      "type": "service_account",
      "project_id": "[PROJECT-ID]",
      "private_key_id": "[KEY-ID]",
      "private_key": "-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n",
      "client_email": "[SERVICE-ACCOUNT-EMAIL]",
      "client_id": "[CLIENT-ID]",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://accounts.google.com/o/oauth2/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/[SERVICE-ACCOUNT-EMAIL]"
      }' > ~/account.json
    - terraform validate -var "deployment_id=validate" -var "dns_managed_zone=validate-fake.com" -var "email=fake@mailinator.com"
    - rm -rf .terraform
    - |
      for example in $(find examples -maxdepth 1 -mindepth 1 -type d); do
      cp providers.tf.example $example/providers.tf
      cd $example
      echo $example
      terraform init
      terraform fmt -check=true
      terraform validate -var "deployment_id=citest" -var "dns_managed_zone=steven-zone"
      rm providers.tf
      rm -rf .terraform
      cd -
      done
    - terraform -v
    - rm providers.tf
    - rm ~/account.json
  when:
    event:
      - pull_request
      - push

- name: from_scratch
  image: sjmiller609/helm-kubectl-terraform:latest
  environment:
    GOOGLE_CREDENTIAL_FILE_CONTENT:
      from_secret: GOOGLE_CREDENTIAL_FILE_CONTENT
  commands:
    - EXAMPLE=from_scratch pipeline/run_terraform.sh
  when:
    event:
      - push
    branch:
      - master

# TODO: expand testing
- name: system_test
  image: sjmiller609/helm-kubectl-terraform:latest
  environment:
    GOOGLE_CREDENTIAL_FILE_CONTENT:
      from_secret: GOOGLE_CREDENTIAL_FILE_CONTENT
  commands:
    - EXAMPLE=from_scratch pipeline/run_test.sh
  when:
    event:
      - push
    branch:
      - master

- name: from_scratch_cleanup
  image: sjmiller609/helm-kubectl-terraform:latest
  environment:
    GOOGLE_CREDENTIAL_FILE_CONTENT:
      from_secret: GOOGLE_CREDENTIAL_FILE_CONTENT
  commands:
    - DESTROY=1 EXAMPLE=from_scratch pipeline/run_terraform.sh
  when:
    event:
      - push
    status:
      - failure
      - success
    branch:
      - master

# It helps to try the cleanup again if it fails
# for some reason the first time.
# A tagged release will not happen if the destroy
# fails the first time.
- name: wait_then_try_cleanup_again
  image: sjmiller609/helm-kubectl-terraform:latest
  environment:
    GOOGLE_CREDENTIAL_FILE_CONTENT:
      from_secret: GOOGLE_CREDENTIAL_FILE_CONTENT
  commands:
    - echo 'sleeping 10 minutes'
    - sleep 600
    - DESTROY=1 EXAMPLE=from_scratch pipeline/run_terraform.sh
  when:
    event:
      - push
    branch:
      - master
    status:
      - failure

- name: git_tag
  image: docker:git
  environment:
    DEPLOY_KEY:
      from_secret: DEPLOY_KEY
  commands:
    - eval `ssh-agent`
    - echo "$DEPLOY_KEY" | ssh-add -
    - TAG=0.1.${DRONE_BUILD_NUMBER}
    - git tag $TAG
    - mkdir -p $HOME/.ssh
    - ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts
    - git push $DRONE_GIT_SSH_URL $DRONE_BRANCH --tags
  when:
    event:
      - push
    status:
      - success
    branch:
      - master
    repo:
      - astronomer/terraform-google-astronomer-cloud

- name: slack
  image: plugins/slack
  settings:
    webhook:
      from_secret: WEBHOOK_URL
    channel: infrastructure
    username: terraform-ci
    template: >
      {{repo.name}}
      {{build.link}}
      {{#success build.status}}
        succeeded
      {{else}}
        failed
      {{/success}}
  when:
    event:
      - push
    status:
      - success
      - failure
    branch:
      - master
    repo:
      - astronomer/terraform-google-astronomer-cloud

- name: slack_tag
  image: plugins/slack
  settings:
    webhook:
      from_secret: WEBHOOK_URL
    channel: infrastructure
    username: terraform-ci
    template: >
      {{repo.name}}
      version {{build.tag}} released
      Run: `drone build promote astronomer/terraform-google-astronomer-cloud ${DRONE_BUILD_NUMBER} staging`
      to run `terraform apply` and roll it to Staging Cluster
  when:
    event:
      - tag
    status:
      - success
    repo:
      - astronomer/terraform-google-astronomer-cloud

- name: terraform_plan
  image: sjmiller609/helm-kubectl-terraform:latest
  environment:
    GOOGLE_CREDENTIAL_FILE_CONTENT:
      from_secret: GOOGLE_CREDENTIAL_FILE_CONTENT_STAGING
  commands:
    - TF_PLAN=1 pipeline/release_stage_cloud.sh
  when:
    event:
      - tag
    branch:
      - master

- name: deploy_to_staging
  image: sjmiller609/helm-kubectl-terraform:latest
  environment:
    GOOGLE_CREDENTIAL_FILE_CONTENT:
      from_secret: GOOGLE_CREDENTIAL_FILE_CONTENT_STAGING
  commands:
    - TF_APPLY=1 pipeline/release_stage_cloud.sh
  when:
    event:
      - promote
    status:
      - success
    repo:
      - astronomer/terraform-google-astronomer-cloud
    target:
      - staging

- name: slack_staging
  image: plugins/slack
  settings:
    webhook:
      from_secret: WEBHOOK_URL
    channel: infrastructure
    username: terraform-ci
    template: >
      {{repo.name}}
      {{#success build.status}}
      deployment of version {{build.tag}} to stage cloud succeeded! :sunglasses:
      https://app.staging.astronomer-staging.com
      {{else}}
      deployment of version {{build.tag}} to stage cloud
      ERROR: pipeline failed!
      build link: {{build.link}}
      {{/success}}
  when:
    event:
      - promote
    status:
      - success
      - failure
    repo:
      - astronomer/terraform-google-astronomer-cloud
    target:
      - staging
